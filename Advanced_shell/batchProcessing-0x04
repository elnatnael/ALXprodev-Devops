#!/bin/bash

# Directory to store JSON files
DATA_DIR="pokemon_data"
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create directory
mkdir -p "$DATA_DIR"
rm -f "$DATA_DIR/error_log.txt"  # Clear old logs

# Function to fetch Pok√©mon data with retry logic
fetch_pokemon() {
  local name="$1"
  local url="https://pokeapi.co/api/v2/pokemon/$name"
  local output_file="$DATA_DIR/${name}.json"

  echo "Fetching data for $name..."

  for attempt in {1..3}; do
    response=$(curl -s -w "%{http_code}" -o "$output_file" "$url")
    status_code="${response: -3}"

    if [ "$status_code" -eq 200 ]; then
      echo "Saved data to $output_file ‚úÖ"
      return 0
    else
      echo "Attempt $attempt for $name failed (HTTP $status_code)"
      sleep 1
    fi
  done

  echo "‚ùå Failed to fetch data for $name after 3 attempts."
  echo "$name" >> "$DATA_DIR/error_log.txt"
  rm -f "$output_file"
}

# Launch fetches in parallel and track PIDs
pids=()
for pokemon in "${POKEMONS[@]}"; do
  fetch_pokemon "$pokemon" &
  pids+=($!)
done

# Show running jobs
echo ""
echo "üìã Background jobs:"
jobs

# Wait for all background processes to finish
for pid in "${pids[@]}"; do
  wait "$pid"
done

echo ""
echo "‚úÖ All parallel fetch operations complete."

# Check again for any remaining jobs (should be none)
if jobs %%; then
  echo "‚ö†Ô∏è Some jobs may still be running ‚Äî killing..."
  jobs -p | xargs kill -9
fi

# Show errors if any
if [ -f "$DATA_DIR/error_log.txt" ]; then
  echo "Some Pok√©mon failed to fetch:"
  cat "$DATA_DIR/error_log.txt"
else
  echo "All Pok√©mon fetched successfully! üéâ"
fi

exit 0
